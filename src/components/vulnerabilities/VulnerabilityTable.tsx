
import React, { useState } from 'react';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  ChevronDown, 
  ChevronUp, 
  Filter, 
  Info, 
  AlertTriangle, 
  AlertCircle, 
  Skull 
} from 'lucide-react';
import { cn } from '@/lib/utils';

export interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  host: string;
  port: number;
  service: string;
  description: string;
  remediation: string;
  cve?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [expandedRows, setExpandedRows] = useState<Record<string, boolean>>({});
  
  const toggleRow = (id: string) => {
    setExpandedRows((prev) => ({
      ...prev,
      [id]: !prev[id],
    }));
  };
  
  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Skull size={16} className="text-cyber-error" />;
      case 'high':
        return <AlertCircle size={16} className="text-cyber-error" />;
      case 'medium':
        return <AlertTriangle size={16} className="text-cyber-warning" />;
      case 'low':
        return <Info size={16} className="text-cyber" />;
      case 'info':
        return <Info size={16} className="text-cyber" />;
      default:
        return null;
    }
  };
  
  const getSeverityClass = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'border-cyber-error text-cyber-error';
      case 'high':
        return 'border-cyber-error text-cyber-error';
      case 'medium':
        return 'border-cyber-warning text-cyber-warning';
      case 'low':
        return 'border-cyber text-cyber';
      case 'info':
        return 'border-muted-foreground text-muted-foreground';
      default:
        return '';
    }
  };

  return (
    <div className="rounded-md border border-border/50 overflow-hidden">
      <div className="p-4 bg-muted/30 flex justify-between items-center">
        <h2 className="text-lg font-medium">Vulnerabilities</h2>
        <Button size="sm" variant="outline">
          <Filter size={16} className="mr-2" />
          Filter
        </Button>
      </div>
      <Table>
        <TableHeader className="bg-muted/20">
          <TableRow>
            <TableHead className="w-[40px]"></TableHead>
            <TableHead>Vulnerability</TableHead>
            <TableHead>Host</TableHead>
            <TableHead>Port / Service</TableHead>
            <TableHead>Severity</TableHead>
            <TableHead className="w-[100px]">CVE</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln) => (
            <React.Fragment key={vuln.id}>
              <TableRow 
                className={cn(
                  "cursor-pointer hover:bg-muted/20",
                  expandedRows[vuln.id] && "bg-muted/10"
                )}
                onClick={() => toggleRow(vuln.id)}
              >
                <TableCell>
                  {expandedRows[vuln.id] ? (
                    <ChevronUp size={20} />
                  ) : (
                    <ChevronDown size={20} />
                  )}
                </TableCell>
                <TableCell className="font-medium">{vuln.title}</TableCell>
                <TableCell>{vuln.host}</TableCell>
                <TableCell>
                  {vuln.port} / {vuln.service}
                </TableCell>
                <TableCell>
                  <Badge
                    variant="outline"
                    className={cn(
                      "flex items-center gap-1.5 px-2 py-1 h-7 rounded-sm",
                      getSeverityClass(vuln.severity)
                    )}
                  >
                    {getSeverityIcon(vuln.severity)}
                    <span className="capitalize">{vuln.severity}</span>
                  </Badge>
                </TableCell>
                <TableCell className="font-mono text-xs">
                  {vuln.cve || 'N/A'}
                </TableCell>
              </TableRow>
              {expandedRows[vuln.id] && (
                <TableRow className="bg-muted/10">
                  <TableCell colSpan={6} className="p-4">
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-1">Description</h4>
                        <p className="text-sm">{vuln.description}</p>
                      </div>
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-1">Remediation</h4>
                        <p className="text-sm">{vuln.remediation}</p>
                      </div>
                      <div className="flex justify-end gap-2">
                        <Button variant="outline" size="sm">
                          Mark as Fixed
                        </Button>
                        <Button variant="outline" size="sm">
                          Mark as False Positive
                        </Button>
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

export default VulnerabilityTable;
